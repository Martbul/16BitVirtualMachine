The cpu has registers/instruction pointer, stack pointer,frame pointer, accumulator and general/, they are used to track state.
The stack gives you a temporary state

Memory is represented by a slice of byte and a stack

The memory mapper is a layer between the cpu and the memory. It maps memory addresses to devices. THe base is 16 bit -> there are 0xffff unifuly addressable bytes, what are devided into a different devices(RAM, output, ...)


THE PARSER:
A parser is a program that reads text input (like code or commands) and converts it into a structured format that a computer can work with more easily. In this case, both parsers are designed to read assembly-like instructions (e.g., mov $42, r4) and convert them into a structured format called an Abstract Syntax Tree (AST).

-lexer - A lexer (short for lexical analyzer) is the first step in a compiler or interpreter pipeline. Its job is to take raw source code — just a string of characters — and break it up into meaningful pieces called tokens.


in the  existing code uses the participle parser library to parse various instruction formats like:

Literal to register (LitToReg)
Register to register (RegToReg)
Register to memory (RegToMem)
Memory to register (MemToReg)
Literal to memory (LitToMem)
Register pointer to register (RegPtrToReg)
Literal offset to register (LitOffToReg)
